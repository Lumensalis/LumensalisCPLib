from __future__ import annotations

# pylint: disable=unused-argument
# pyright: reportMissingImports=false, reportImportCycles=false, reportUnusedImport=false

from random import random as randomZeroToOne, randint

from LumensalisCP.common import *
from LumensalisCP.Eval.Evaluatable import Evaluatable
type RawOrEvaluatable[T] = Union[T, Evaluatable[T]]
from LumensalisCP.util.Convertor import Convertor

from LumensalisCP.Lights.RGB import *

class LightValueBase(object):
    def __init__(self )->None: pass

    @property
    def brightness(self)->float: pass

    
    def asNeoPixelRGBInt(self)->int: pass
    
    @property
    def asRGB(self) -> RGB: pass

    def setLight(self, value:AnyRGBValue) -> None: pass


@RGB.Convertors.registerChildClass()
class LightValueRGB(RGB, LightValueBase ):
    RED = RGB( 1, 0, 0 )
    BLUE = RGB( 0, 0, 1 )
    YELLOW = RGB( 0, 1, 1 )
    GREEN = RGB( 0, 1, 0 )
    BLACK = RGB( 0, 0, 0 )
    WHITE = RGB( 1, 1, 1 )
    
    @staticmethod
    def lookupColor( color:str ) ->RGB: pass

    @staticmethod
    def toRGB( value:AnyRGBValue )->RGB:pass

    @staticmethod
    def prepRGBValue( value:AnyRGBValue ) ->RGB: pass
        
    def setLight(self, value:AnyRGBValue) -> None: pass

    @staticmethod
    def randomRGB( brightness:ZeroToOne=1) -> RGB: pass

    @property
    def asNeoPixelRGBInt(self)->int: pass
    
    @property
    def asRGB(self) -> RGB: pass
    
@RGB.Convertors.registerChildClass()
class LightValueNeoRGB(LightValueBase):
    NeoPixelIntConvertors:ClassVar[Convertor[AnyRGBValue,NeoPixelRGBInt]] 

    @staticmethod
    def toNeoPixelRGBInt( value:AnyRGBValue )->int: pass
    
    @staticmethod
    def formatNeoRGBValues( values:list[NeoPixelRGBInt] ) ->str: pass
    
    def __init__(self,  value:AnyRGBValue )-> None: pass

    @staticmethod
    def randomRGB( brightness:ZeroToOne=1) ->int: pass

    @property
    def brightness(self)->float: pass
    
    def setLight(self, value:AnyRGBValue) -> None: pass

    @property
    def asNeoPixelRGBInt(self)->int: pass
    
    @property
    def asRGB(self) -> RGB: pass


#############################################################################
#def wheel255( val:float ): ...

#def wheel1( val:float ): ...
